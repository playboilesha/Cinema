-----таблица юзеров
create table users 
(
user_id number generated by default as identity,
user_name varchar2(40) NOT NULL unique,
user_password varchar2(50) NOT NULL,
 CONSTRAINT user_id_pk PRIMARY KEY (user_id)
);

select * from users;

-----таблица фильмов
create table Films
(
Film_name varchar2(1000) not null ,
Director varchar2(1000) not null,
Genre_name varchar2(20) not null  CHECK (Genre_name IN ('action', 'drama', 'melodrama', 'fantasy', 'family', 'documentary', 'western', 'adventure', 'comedy')),
Duration_film number check(Duration_film <1000),
Year_film DATE,
Film_opis varchar2(2000),
CONSTRAINT Film_name_pk PRIMARY KEY (Film_name)

);

select * from films

---таблица жанров

create table Genre(
Genre_name varchar2(20) not null   CHECK (Genre_name IN ('action', 'drama', 'melodrama', 'fantasy', 'family', 'documentary', 'western', 'adventure', 'comedy')),
Film_name varchar2(1000) not null,
CONSTRAINT Genre_name_pk PRIMARY KEY (Genre_name),
 CONSTRAINT fk_Film_name
    FOREIGN KEY (Film_name)
    REFERENCES Films(Film_name)
);

select * from genre;

-----таблица режиссёры
create table Director(
Director_name varchar2(1000) not null ,
Film_name varchar2(1000) not null,
Director_opis varchar2(1000) not null,
CONSTRAINT Director_name_pk PRIMARY KEY (Director_name),
 CONSTRAINT fk_Film_name_d
    FOREIGN KEY (Film_name)
    REFERENCES Films(Film_name)
    
);

select * from director

----таблица сеансы

create table sessions(
session_id number,
cinema_name varchar2(50) not null,
hall_id number check(hall_id = 1 or hall_id = 2 or hall_id = 3) not null,
Film_name varchar2(1000) not null,
session_start date not null,
session_time  number not null,
session_price varchar2(20) check (session_price like '%$') not null,
session_status varchar2(12) not null check(session_status = 'not started' or session_status = 'started'),
CONSTRAINT session_id_pk PRIMARY KEY (session_id),
 CONSTRAINT cinema_name_fk
    FOREIGN KEY (cinema_name)
    REFERENCES cinema(cinema_name),
    CONSTRAINT hall_id_fk
    FOREIGN KEY (hall_id)
    REFERENCES halls(hall_id),
      CONSTRAINT Film_name_fk
    FOREIGN KEY (Film_name)
    REFERENCES Films(Film_name)
);

select * from sessions;

---таблица залы

create table halls(
hall_id number check(hall_id = 1 or hall_id = 2 or hall_id = 3),
hall_name varchar2(20) check(hall_name = 'blue' or hall_name = 'red' or hall_name = 'black' ) not null,
count_place number not null,
CONSTRAINT hall_id_pk PRIMARY KEY (hall_id)
);

select * from halls;


----таблица кинотеатры

Create table cinema(
cinema_name varchar2(50),
cinema_telephone  varchar2(13) check(cinema_telephone like '+%') not null,
cinema_locate varchar2(50) not null,
CONSTRAINT cinema_name_pk PRIMARY KEY (cinema_name)
);

select * from cinema;


---таблица бронирование

create table BOOKING(
booking_id number generated always as identity,
user_name varchar2(40) NOT NULL,
session_id number not null,
place_number number check(place_number <151),
CONSTRAINT booking_id_pk PRIMARY KEY (booking_id),
  CONSTRAINT session_id_fk
    FOREIGN KEY (session_id)
    REFERENCES sessions(session_id),
     CONSTRAINT user_name_fk
    FOREIGN KEY (user_name)
    REFERENCES users(user_name)
);

select * from booking;

----таблица проверки посещения сеанса

create table check_user(
check_user_id number,
user_name varchar2(40) NOT NULL,
session_id number not null,
place_number number check(place_number <151),
status varchar(20) default 'none' check(status = 'none' or status = 'yes' or status = 'no'),
CONSTRAINT check_user_id_pk PRIMARY KEY (check_user_id),
  CONSTRAINT session_id_chk_fk
    FOREIGN KEY (session_id)
    REFERENCES  sessions(session_id),
     CONSTRAINT user_name_chk_fk
    FOREIGN KEY (user_name)
    REFERENCES  users(user_name)
);

select * from check_User;

---представление проверки пользователей

CREATE OR REPLACE VIEW check_user_v
AS SELECT *
FROM check_user;

select * from check_user_v;

---предстовление о кинотеатрах

CREATE OR REPLACE VIEW cinema_v
AS SELECT *
FROM cinema;

select * from cinema_v;

---предстовление о залах

CREATE OR REPLACE VIEW halls_v
AS SELECT *
FROM halls;

select * from halls_v;
